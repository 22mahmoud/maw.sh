# Generated by Django 5.2.3 on 2025-07-04 16:26

import django.db.models.deletion
import modelcluster.fields
import wagtail.fields
import wagtail.models.workflows
from django.conf import settings
from django.db import migrations, models

import src.base.blocks.link


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        ("wagtailcore", "0095_query_searchpromotion_querydailyhits"),
        ("wagtailimages", "0027_image_description"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GenericPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "canonical_url",
                    models.URLField(
                        blank=True,
                        help_text="Leave blank to use the page's URL.",
                        max_length=255,
                        verbose_name="Canonical URL",
                    ),
                ),
                (
                    "introduction",
                    models.TextField(blank=True, help_text="Text to describe the page"),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("hero", 22),
                            ("clients", 23),
                            ("social_links", 24),
                            ("Video", 25),
                            ("button", 10),
                        ],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.images.blocks.ImageChooserBlock",
                                (),
                                {"help_text": "Hero image", "required": False},
                            ),
                            1: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"max_length": 255, "required": True},
                            ),
                            2: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {"features": ["bold", "italic", "link"]},
                            ),
                            3: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("primary", "Primary"),
                                        ("secondary", "Secondary"),
                                        ("outline", "Outline"),
                                        ("muted", "Muted"),
                                        ("disabled", "Disabled"),
                                    ]
                                },
                            ),
                            4: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("sm", "Small"),
                                        ("md", "Medium"),
                                        ("lg", "Large"),
                                    ]
                                },
                            ),
                            5: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"help_text": "Optional icon name", "required": False},
                            ),
                            6: ("wagtail.blocks.CharBlock", (), {"max_length": 20}),
                            7: ("wagtail.blocks.URLBlock", (), {"required": False}),
                            8: (
                                "wagtail.blocks.PageChooserBlock",
                                (),
                                {"required": False},
                            ),
                            9: (
                                "wagtail.documents.blocks.DocumentChooserBlock",
                                (),
                                {"required": False},
                            ),
                            10: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("button_type", 3),
                                        ("size", 4),
                                        ("button_icon", 5),
                                        ("button_text", 6),
                                        ("external_link", 7),
                                        ("internal_link", 8),
                                        ("download_link", 9),
                                    ]
                                ],
                                {},
                            ),
                            11: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": src.base.blocks.link.get_available_social_choices
                                },
                            ),
                            12: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("sm", "Small"),
                                        ("md", "Medium"),
                                        ("lg", "Large"),
                                    ],
                                    "required": False,
                                },
                            ),
                            13: (
                                "wagtail.blocks.StructBlock",
                                [[("platform", 11), ("size", 12)]],
                                {},
                            ),
                            14: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("default", "Default Link"),
                                        ("icon", "Icon Only"),
                                    ],
                                    "required": False,
                                },
                            ),
                            15: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Specify title for external link or provide override title for internal/download/pages links.",
                                    "label": "Link Title Text",
                                    "required": False,
                                },
                            ),
                            16: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Specify title for screen Reader in case you use only icons",
                                    "label": "Screen Reader Link Text",
                                    "required": False,
                                },
                            ),
                            17: (
                                "wagtail.blocks.PageChooserBlock",
                                (),
                                {
                                    "help_text": "Use to link to selected internal page OR...",
                                    "label": "Link (Internal Page)",
                                    "required": False,
                                },
                            ),
                            18: (
                                "wagtail.documents.blocks.DocumentChooserBlock",
                                (),
                                {
                                    "help_text": "Use to link to selected document for download OR",
                                    "label": "Download (Document)",
                                    "required": False,
                                },
                            ),
                            19: (
                                "wagtail.blocks.URLBlock",
                                (),
                                {
                                    "help_text": "Use to link to an external site.",
                                    "label": "Link (External URL)",
                                    "required": False,
                                },
                            ),
                            20: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("link_type", 14),
                                        ("size", 12),
                                        ("text", 15),
                                        ("sr_text", 16),
                                        ("icon", 5),
                                        ("internal_link", 17),
                                        ("download_link", 18),
                                        ("external_link", 19),
                                    ]
                                ],
                                {},
                            ),
                            21: (
                                "wagtail.blocks.StreamBlock",
                                [[("site", 13), ("custom", 20)]],
                                {"required": False},
                            ),
                            22: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("image", 0),
                                        ("headline", 1),
                                        ("text", 2),
                                        ("cta", 10),
                                        ("social_links", 21),
                                    ]
                                ],
                                {},
                            ),
                            23: (
                                "src.clients.blocks.ClientsMarqueeStaticBlock",
                                (),
                                {},
                            ),
                            24: (
                                "wagtail.blocks.StreamBlock",
                                [[("site", 13), ("custom", 20)]],
                                {},
                            ),
                            25: ("wagtailmedia.blocks.VideoChooserBlock", (), {}),
                        },
                    ),
                ),
                (
                    "og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Shown when linking to this page on social media. If blank, may show an image from the page, or the default from Settings > SEO.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Preview image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PageTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "live",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="live"
                    ),
                ),
                (
                    "has_unpublished_changes",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        verbose_name="has unpublished changes",
                    ),
                ),
                (
                    "first_published_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="first published at",
                    ),
                ),
                (
                    "last_published_at",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="last published at"
                    ),
                ),
                (
                    "go_live_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="go live date/time"
                    ),
                ),
                (
                    "expire_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="expiry date/time"
                    ),
                ),
                (
                    "expired",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="expired"
                    ),
                ),
                (
                    "locked",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="locked"
                    ),
                ),
                (
                    "locked_at",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="locked at"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=254, verbose_name="First name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=254, verbose_name="Last name"),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=254, verbose_name="Title"),
                ),
                (
                    "bio",
                    models.TextField(blank=True, max_length=254, verbose_name="Bio"),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "latest_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="latest revision",
                    ),
                ),
                (
                    "live_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="live revision",
                    ),
                ),
                (
                    "locked_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="locked_%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="locked by",
                    ),
                ),
            ],
            options={
                "verbose_name": "person",
                "verbose_name_plural": "people",
            },
            bases=(wagtail.models.workflows.WorkflowMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PostPersonRelationship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="page_person_relationship",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="person_page_relationship",
                        to="base.person",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SiteSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "avilable_for_projects",
                    models.BooleanField(
                        default=False, verbose_name="Avilable for projects"
                    ),
                ),
                ("twitter", models.CharField(blank=True, verbose_name="Twitter")),
                ("mastodon", models.CharField(blank=True, verbose_name="Mastodon")),
                ("youtube", models.CharField(blank=True, verbose_name="Youtube")),
                ("reddit", models.CharField(blank=True, verbose_name="Reddit")),
                ("github", models.CharField(blank=True, verbose_name="Github")),
                (
                    "pixelfed",
                    models.CharField(blank=True, verbose_name="Pixelfed.social"),
                ),
                ("linkedin", models.CharField(blank=True, verbose_name="Linkedin")),
                ("bluesky", models.CharField(blank=True, verbose_name="Bluesky")),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
