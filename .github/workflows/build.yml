name: build

env:
  pandoc_version: 3.6.4
  yq_version: v4.45.1
  imagemagick_version: '7.1.1-47'

on:
  workflow_dispatch:
  push:
  workflow_run:
    workflows: ['update_webmentions']
    types:
      - completed
jobs:
  build:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22]

    steps:
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/bin/yq
            /usr/local/bin/pandoc
            /usr/local/bin/magick
            /usr/local/bin/identify
            /usr/local/share/pandoc
            ~/.imagemagick
          key: ${{ runner.os }}-deps-imagemagick.${{ env.imagemagick_version }}-pandoc.${{ env.pandoc_version }}-yq.${{ env.yq_version }}

      - name: instal external deps
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          # Install build dependencies for ImageMagick
          sudo apt-get update
          sudo apt-get install -y \
            wget build-essential libpng-dev libjpeg-dev \
            libtiff-dev libwebp-dev ffmpeg libheif-dev

          # Download and install ImageMagick 7
          wget https://github.com/ImageMagick/ImageMagick/archive/refs/tags/${{ env.imagemagick_version }}.tar.gz
          tar xvf ${{ env.imagemagick_version }}.tar.gz
          cd ImageMagick-${{ env.imagemagick_version }}
          ./configure --prefix=$HOME/.imagemagick --with-heic --with-webp
          make -j$(nproc)
          make install
          sudo ln -s $HOME/.imagemagick/bin/magick /usr/local/bin/magick
          sudo ln -s $HOME/.imagemagick/bin/identify /usr/local/bin/identify
          cd ..

          # Install yq
          wget https://github.com/mikefarah/yq/releases/download/${{ env.yq_version }}/yq_linux_amd64
          chmod +x yq_linux_amd64
          sudo cp -r yq_linux_amd64 /usr/local/bin/yq

          # Install pandoc
          wget https://github.com/jgm/pandoc/releases/download/${{ env.pandoc_version }}/pandoc-${{ env.pandoc_version }}-linux-amd64.tar.gz
          tar -xvf   pandoc-${{ env.pandoc_version }}-linux-amd64.tar.gz
          sudo cp -r pandoc-${{ env.pandoc_version }}/bin/* /usr/local/bin
          sudo cp -r pandoc-${{ env.pandoc_version }}/share/* /usr/local/share

      - name: install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y wget ffmpeg libavif-bin

      - name: Checkout the source repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Restore cached dist
        id: cache-dist-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            dist
          key: ${{ runner.os }}-dist-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-dist-

      - name: Restore cached .tmp
        id: cache-tmp-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            .tmp
          key: ${{ runner.os }}-tmp-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tmp-

      - name: clean dist dir
        if: github.event_name == 'workflow_dispatch'
        run: make distclean

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: install node deps
        run: |
          pnpm install

      - name: build
        run: |
          set -e
          make build -j$(nproc)
          wait

      - name: post build
        run: |
          pnpm run css

      - name: Save dist cache
        id: cache-dist-save
        uses: actions/cache/save@v4
        with:
          path: |
            dist
          key: ${{ runner.os }}-dist-${{ github.sha }}

      - name: Save tmp cache
        id: cache-tmp-save
        uses: actions/cache/save@v4
        with:
          path: |
            .tmp
          key: ${{ runner.os }}-tmp-${{ github.sha }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Deploy to Coolify
        run: |
          curl --request GET '${{ secrets.COOLIFY_WEBHOOK }}' --header 'Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}'
